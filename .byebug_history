q
p.match
p
q
request.authorization.present? && (request.authorization.split(' ', 2).first == 'Basic')
c
request.authorization.present? && (request.authorization.split(' ', 2).first == 'Basic')
c
request.authorization.present? && (request.authorization.split(' ', 2).first == 'Basic')
request.authorization.present?
session[:authorized]
session
q
presence.team == "black" and presence.match.black_goals < presence.match.white_goals
presence.team == "white" and presence.match.black_goals < presence.match.white_goals
presence.team == "black" and presence.match.black_goals > presence.match.white_goals
presence.match
presence.team
presece.team
q
player.results
player
results
c
presences.first.match
presences.first.team
self
presences.first.team
presence.first
presence.first.team
presences.team
presences.count
presences
self
player
q
presence.match
n
presence.match
presence.team
exit
presence.match.black_goal
presence.team == "white" and presence.match.black_goal < presence.match.white_goalc
presence.team == "black" and presence.match.black_goal > presence.match.white_goal
n
presence.team == "white" and presence.match.black_goal < presence.match.white_goal
presence.team == "black" and presence.match.black_goal > presence.match.white_goal
presence.match.white_goal
presence.match.black_goal
=>  9:        presence.team == "white" and presence.match.black_goal < presence.match.white_goal 
presence.team == "black" and presence.match.black_goal > presence.match.white_goal or
presence.team
presence
